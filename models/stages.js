const Stage = require('telegraf/stage');
const Scene = require('telegraf/scenes/base');
const Database = require('./database');
const { Reply } = require('./replies');

const Stages = new Stage();

const StartScene = new Scene('start-scene');
const RateMoodScene = new Scene('rate-mood-scene');
const MainMenuScene = new Scene('main-menu-scene');
const SelectMoodScene = new Scene('select-mood-scene');
const AccountMenuScene = new Scene('account-menu-scene');
const SendMessageScene = new Scene('send-message-scene');
const DescribeMoodScene = new Scene('describe-mood-scene');

StartScene.enter(async function (ctx) {
    let user = await Database.getUser(ctx.from.id);

    if (user == undefined) {
        user = {
            id: ctx.from.id,
            username: ctx.from.username,
            subscribed: 1,
            status: 'user'
        };

        await Database.addUser(user);
        await ctx.reply(Reply.onStart.text, Reply.onStart.options);
    }

    return ctx.scene.enter('main-menu-scene');
});

MainMenuScene.enter(async function (ctx) {
    let user = await Database.getUser(ctx.from.id);

    if (user.status == 'user')
        return ctx.reply(Reply.onMainMenu.text, Reply.onMainMenu.options);

    if (user.status == 'owner')
        return ctx.reply(Reply.onMainMenu.owner.text, Reply.onMainMenu.owner.options);
});

MainMenuScene.on('text', async function (ctx) {
    switch (ctx.update.message.text) {
        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            return ctx.scene.enter('account-menu-scene');

        case '‚ùì –£–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ':
            return await sendMood(ctx);

        case '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å':
            return ctx.scene.enter('send-message-scene');

        case 'üòä –ú–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ':
            return ctx.scene.enter('select-mood-scene');

        default:
            return ctx.reply(Reply.onWrong.text, Reply.onWrong.options);
    }
});

MainMenuScene.on('callback_query', async function (ctx) {
    if (ctx.update.callback_query.data == 'hide')
        return ctx.deleteMessage();
});

SendMessageScene.enter(async function (ctx) {
    return ctx.reply(Reply.onSendMessage.text, Reply.onSendMessage.options);
});

SendMessageScene.on('text', async function (ctx) {
    if (ctx.update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞')
        return ctx.scene.enter('main-menu-scene');

    let response = {
        text: ctx.update.message.text,
        options: {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'send' }, { text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'decline' }]
                ]
            }
        }
    }

    ctx.session.message = {
        id: null,
        time: new Date().toTimeString(),
        date: new Date().toDateString(),
        text: ctx.update.message.text,
        from: ctx.from.id,
    };

    return ctx.reply(response.text, response.options);
});

SendMessageScene.on('callback_query', async function (ctx) {
    switch (ctx.update.callback_query.data) {
        case 'send':
            return await sendMessage(ctx);

        case 'decline':
            return ctx.deleteMessage();
    }
});

AccountMenuScene.enter(async function (ctx) {
    let user = await Database.getUser(ctx.from.id);

    let message = {
        text: '<b>–°–µ–π—á–∞—Å —Ç–µ–±—è –ø–æ–∏—â—É...</b>',
        options: {
            reply_markup: {
                keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }]
                ],
                resize_keyboard: true
            },
            parse_mode: "HTML"
        }
    };

    await ctx.reply(message.text, message.options);

    let response = {
        text: `<b>–ü—Ä–∏–≤–µ—Ç, @${user.username}</b>\n\n<i>–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ê–Ω–∏, —è –¥—É–º–∞—é —Ä–∞–∑–±–µ—Ä—ë—à—å—Å—è –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</i>`,
        options: {
            reply_markup: {
                inline_keyboard: []
            },
            parse_mode: 'HTML'
        }
    };

    if (user.subscribed == 1)
        response.options.reply_markup.inline_keyboard.push([{ text: '–ú–µ–Ω—è –Ω–µ –ø–∞—Ä–∏—Ç', callback_data: 'unsubscribe' }]);

    if (user.subscribed == 0)
        response.options.reply_markup.inline_keyboard.push([{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', callback_data: 'subscribe' }]);

    return ctx.reply(response.text, response.options);
});

AccountMenuScene.on('callback_query', async function (ctx) {
    let user = await Database.getUser(ctx.from.id);

    if (ctx.update.callback_query.data == 'subscribe') {
        user.subscribed = 1;
        await Database.updateUser(user);
        await ctx.answerCbQuery('–•–∞-—Ö–∞, —Ç–∞–∫ –∏ –∑–Ω–∞–ª', true);
    }

    if (ctx.update.callback_query.data == 'unsubscribe') {
        user.subscribed = 0;
        await Database.updateUser(user);
        await ctx.answerCbQuery('–ù—É –∏ –ª–∞–¥–Ω–æ');
    }

    let reply_markup = {
        inline_keyboard: []
    };

    if (user.subscribed == 1)
        reply_markup.inline_keyboard.push([{ text: '–ú–µ–Ω—è –Ω–µ –ø–∞—Ä–∏—Ç', callback_data: 'unsubscribe' }]);

    if (user.subscribed == 0)
        reply_markup.inline_keyboard.push([{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', callback_data: 'subscribe' }]);


    return ctx.editMessageReplyMarkup({ inline_keyboard: reply_markup.inline_keyboard });
});

AccountMenuScene.on('text', async function (ctx) {
    if (ctx.update.message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥') {
        return ctx.scene.enter('main-menu-scene');
    } else {
        return ctx.reply(Reply.onWrong.text, Reply.onWrong.options);
    }
});

SelectMoodScene.enter(async function (ctx) {
    let response = {
        text: '<b>–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ</b>\n\n<i>–≠—Ç–æ –Ω–∞–±–æ—Ä —Å–º–∞–π–ª–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –≤–∏–¥ –∏–ª–∏ –≤–∑–≥–ª—è–¥ —Å–µ–π—á–∞—Å</i>\n\n<i>–ù–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º</i>',
        options: {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üò¢', callback_data: 'üò¢' }, { text: 'üòû', callback_data: 'üòû' }, { text: 'üòí', callback_data: 'üòí' }],
                    [{ text: 'üòÉ', callback_data: 'üòÉ' }, { text: 'üòÅ', callback_data: 'üòÅ' }, { text: 'üòç', callback_data: 'üòç' }],
                    [{ text: 'üòâ', callback_data: 'üòâ' }, { text: 'üòù', callback_data: 'üòù' }, { text: 'üò°', callback_data: 'üò°' }],
                    [{ text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π', callback_data: 'set_sent' }]
                ]
            },
            parse_mode: 'HTML'
        }
    }

    return ctx.reply(response.text, response.options);
});

SelectMoodScene.on('text', async function (ctx) {
    if (ctx.update.message.text == 'üòä –ú–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')
        return ctx.scene.enter('select-mood-scene');

    if (ctx.update.message.text == 'üì• –°–æ–æ–±—â–µ–Ω–∏—è')
        return ctx.scene.enter('new-messages-scene');

    if (ctx.update.message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        return ctx.scene.enter('stat-menu-scene');

    ctx.session.caption = ctx.update.message.text;

    let response = {
        text: ctx.update.message.text,
        options: {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'accept' }, { text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'decline' }]
                ]
            },
            parse_mode: 'HTML'
        }
    }

    return ctx.reply(response.text, response.options);
});

SelectMoodScene.on('callback_query', async function (ctx) {
    if (ctx.update.callback_query.data == 'set_sent')
        return ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–º–∞–π–ª–∏–∫', true);

    if (ctx.update.callback_query.data == 'decline')
        return ctx.deleteMessage();

    if (ctx.update.callback_query.data == 'accept') {
        await ctx.answerCbQuery('–¢–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ' + ctx.session.caption);
        return ctx.scene.enter('rate-mood-scene');
    }

    ctx.session.caption = ctx.update.callback_query.data;

    await ctx.answerCbQuery('–¢–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ' + ctx.update.callback_query.data);
    return ctx.scene.enter('rate-mood-scene');
});

RateMoodScene.enter(async function (ctx) {
    ctx.session.value = 5.0;

    let response = {
        text: '<b>–ï—â—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>\n\n<i>–ê —Ç–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–π\n\n–î–µ–ª–æ –≤ —Ç–æ–º —á—Ç–æ —è –µ—â—ë –Ω–µ —É–º–µ—é –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Å–º–∞–π–ª–∏–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ 10-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ</i>',
        options: {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîΩ', callback_data: 'down' }, { text: `${ctx.session.value}/10`, callback_data: 'current' }, { text: 'üîº', callback_data: 'up' }],
                    [{ text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ', callback_data: 'set' }]
                ]
            },
            parse_mode: 'HTML'
        }
    };

    return ctx.reply(response.text, response.options);
});

RateMoodScene.on('callback_query', async function (ctx) {
    switch (ctx.update.callback_query.data) {
        case 'up':
            ctx.session.value++;
            return ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: 'üîΩ', callback_data: 'down' }, { text: `${ctx.session.value}/10`, callback_data: 'current' }, { text: 'üîº', callback_data: 'up' }],
                    [{ text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ', callback_data: 'set' }]
                ]
            });

        case 'down':
            ctx.session.value--;
            return ctx.editMessageReplyMarkup({
                inline_keyboard: [
                    [{ text: 'üîΩ', callback_data: 'down' }, { text: `${ctx.session.value}/10`, callback_data: 'current' }, { text: 'üîº', callback_data: 'up' }],
                    [{ text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ', callback_data: 'set' }]
                ]
            });

        case 'set':
            await ctx.answerCbQuery('–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: ' + ctx.session.value);
            return ctx.scene.enter('describe-mood-scene');

        case 'current':
            return ctx.answerCbQuery(`–°–µ–π—á–∞—Å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${ctx.session.value}/10`, true);
    }
});

DescribeMoodScene.enter(async function (ctx) {
    let response = {
        text: '<b>–ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ—á–µ–º—É —Ç–∞–∫</b>\n\n<i>–ß—Ç–æ —Ç–µ–±—è –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–æ? –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—è</i>',
        options: {
            reply_markup: {
                keyboard: [
                    [{ text: '–ù–µ —Å–∫–∞–∂—É' }]
                ],
                resize_keyboard: true
            },
            parse_mode: 'HTML'
        }
    }

    return ctx.reply(response.text, response.options);
});

DescribeMoodScene.on('text', async function (ctx) {
    ctx.session.description = ctx.update.message.text;

    let mood = {
        id: null,
        time: new Date().toTimeString(),
        date: new Date().toDateString(),
        caption: ctx.session.caption,
        description: ctx.session.description,
        value: ctx.session.value
    };

    ctx.session.mood = mood;

    console.log(mood);

    if (mood.description == '–ù–µ —Å–∫–∞–∂—É')
        mood.description = '–ù–µ –≥–æ–≤–æ—Ä–∏—Ç –ø–æ—á–µ–º—É';

    let response = {
        text: `<b>–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</b>\n\n<b>–ù–∞—Ç—Å—Ä–æ–µ–Ω–∏–µ: </b>${mood.value}/10\n\n<b>${mood.caption}</b>\n<i>${mood.description}</i>\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: </b>\n${mood.date} –≤ ${mood.time}`,
        options: {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'accept' }, { text: '–£–¥–∞–ª–∏—Ç—å', callback_data: 'decline' }]
                ]
            },
            parse_mode: 'HTML'
        }
    }

    return ctx.reply(response.text, response.options);
});

DescribeMoodScene.on('callback_query', async function (ctx) {
    if (ctx.update.callback_query.data == 'accept') {
        await Database.addMood(ctx.session.mood);
        await ctx.answerCbQuery('–°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ');
    } else
        await ctx.deleteMessage();

    return ctx.scene.enter('main-menu-scene');
});

async function sendMood(ctx) {
    let mood = await Database.getMood();

    if (mood.length == 0)
        return ctx.reply('üßê <b>–ù–µ –∑–Ω–∞—é</b>\n\n<i>–ê–Ω—è –¥–∞–≤–Ω–æ –º–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª–∞, —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è —è –∏ —Å–∞–º –ø–µ—Ä–µ–∂–∏–≤–∞—é</i>', { parse_mode: 'HTML' });

    let latest = mood[mood.length - 1];

    let response = {
        text: `<b>–ù–∞—Ç—Å—Ä–æ–µ–Ω–∏–µ: </b>${latest.value}/10\n\n<b>${latest.caption}</b>\n<i>${latest.description}</i>\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: </b>\n${latest.date} –≤ ${latest.time}`,
        options: {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üëå –ü–æ–Ω—è—Ç–Ω–æ', callback_data: 'hide' }]
                ]
            },
            parse_mode: 'HTML'
        }
    }

    return ctx.reply(response.text, response.options);
}

async function sendMessage(ctx) {
    let user = await Database.getUser(ctx.from.id);

    if (user.status == 'banned') {
        await ctx.answerCbQuery('–¢—ã –≤—ë–ª —Å–µ–±—è –ø–ª–æ—Ö–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é', true);
        return ctx.scene.enter('main-menu-scene');
    }

    await Database.addMessage(ctx.session.message);
    await ctx.answerCbQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', true);
    return ctx.scene.enter('main-menu-scene');
}

Stages.register(StartScene, MainMenuScene, SelectMoodScene, SelectMoodScene, SendMessageScene, AccountMenuScene, RateMoodScene, DescribeMoodScene);

module.exports = { Stages };